package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
)


// Resource 结构体用于存储资源名称
type Resource struct {
	Name string // 资源名称
	Path string // 资源路径
}

func main() {
	// 定义命令行参数
	inputPath := flag.String("input", "./Assets.xcassets", "Assets.xcassets目录路径")
	colorOutput := flag.String("color-output", "./R_color.swift", "颜色常量输出文件路径")
	imageOutput := flag.String("image-output", "./R_image.swift", "图片常量输出文件路径")
	createR := flag.String("create-r", "", "创建R结构体的文件路径，如果不传则不创建R结构体")
	flag.Parse()

	// 验证输入路径是否存在
	if _, err := os.Stat(*inputPath); os.IsNotExist(err) {
		fmt.Printf("错误: 输入路径不存在: %s\n", *inputPath)
		os.Exit(1)
	}

	// 扫描所有的colorset目录
	colorsets, err := scanColorsets(*inputPath)
	if err != nil {
		fmt.Printf("扫描colorset失败: %v\n", err)
		os.Exit(1)
	}

	// 扫描所有的imageset目录
	imagesets, err := scanImagesets(*inputPath)
	if err != nil {
		fmt.Printf("扫描imageset失败: %v\n", err)
		os.Exit(1)
	}

	// 如果指定了create-r参数，先创建R结构体文件
	if *createR != "" {
		if err := createRStruct(*createR); err != nil {
			fmt.Printf("创建R结构体文件失败: %v\n", err)
			os.Exit(1)
		}
		fmt.Printf("✅ 创建R结构体文件: %s\n", *createR)
	}

	// 生成颜色常量文件
	if err := generateColorConstants(colorsets, *colorOutput, *createR != ""); err != nil {
		fmt.Printf("生成颜色常量文件失败: %v\n", err)
		os.Exit(1)
	}

	// 生成图片常量文件
	if err := generateImageConstants(imagesets, *imageOutput, *createR != ""); err != nil {
		fmt.Printf("生成图片常量文件失败: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("✅ 成功生成常量文件:\n")
	fmt.Printf("   颜色常量: %s (%d个)\n", *colorOutput, len(colorsets))
	fmt.Printf("   图片常量: %s (%d个)\n", *imageOutput, len(imagesets))
}

// scanColorsets 扫描所有的colorset目录
func scanColorsets(rootPath string) ([]Resource, error) {
	var colorsets []Resource

	err := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// 检查是否是colorset目录
		if info.IsDir() && strings.HasSuffix(info.Name(), ".colorset") {
			// 获取颜色名称（去掉.colorset后缀）
			colorName := strings.TrimSuffix(info.Name(), ".colorset")
			
			// 验证Contents.json是否存在
			contentsPath := filepath.Join(path, "Contents.json")
			if _, err := os.Stat(contentsPath); err == nil {
				colorsets = append(colorsets, Resource{
					Name: colorName,
					Path: path,
				})
			}
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	// 按名称排序
	sort.Slice(colorsets, func(i, j int) bool {
		return colorsets[i].Name < colorsets[j].Name
	})

	return colorsets, nil
}

// scanImagesets 扫描所有的imageset目录
func scanImagesets(rootPath string) ([]Resource, error) {
	var imagesets []Resource

	err := filepath.Walk(rootPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// 检查是否是imageset目录
		if info.IsDir() && strings.HasSuffix(info.Name(), ".imageset") {
			// 获取图片名称（去掉.imageset后缀）
			imageName := strings.TrimSuffix(info.Name(), ".imageset")
			
			// 验证Contents.json是否存在
			contentsPath := filepath.Join(path, "Contents.json")
			if _, err := os.Stat(contentsPath); err == nil {
				imagesets = append(imagesets, Resource{
					Name: imageName,
					Path: path,
				})
			}
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	// 按名称排序
	sort.Slice(imagesets, func(i, j int) bool {
		return imagesets[i].Name < imagesets[j].Name
	})

	return imagesets, nil
}

// createRStruct 创建R结构体文件
func createRStruct(outputPath string) error {
	content := `// Generated by ios-assets-coder
// DO NOT EDIT THIS FILE MANUALLY

import SwiftUI

// MARK: - R Struct
public struct R {
    // This struct will be extended in other generated files
}
`
	// 写入文件
	if err := os.WriteFile(outputPath, []byte(content), 0644); err != nil {
		return err
	}
	return nil
}

// generateColorConstants 生成颜色常量文件
func generateColorConstants(colorsets []Resource, outputPath string, hasRStruct bool) error {
	var content strings.Builder

	// 写入文件头部注释
	content.WriteString("// Generated by ios-assets-coder\n")
	content.WriteString("// DO NOT EDIT THIS FILE MANUALLY\n\n")
	content.WriteString("import SwiftUI\n\n")

	// 生成Color扩展
	content.WriteString("// MARK: - Color Extension\n")
	content.WriteString("extension Color {\n")
	for _, colorset := range colorsets {
		// 将颜色名称转换为Swift属性名（保持原始名称，但确保是有效的Swift标识符）
		propertyName := sanitizeSwiftIdentifier(colorset.Name)
		content.WriteString(fmt.Sprintf("    /// %s\n", colorset.Name))
		content.WriteString(fmt.Sprintf("    public static var %s: Color {\n", propertyName))
		content.WriteString(fmt.Sprintf("        Color(\"%s\")\n", colorset.Name))
		content.WriteString("    }\n")
	}
	content.WriteString("}\n\n")

	// 生成R扩展（用于字符串常量）
	if hasRStruct {
		content.WriteString("// MARK: - R Extension for Color Names\n")
		content.WriteString("extension R {\n")
		content.WriteString("    // MARK: - Color Names\n")
		for _, colorset := range colorsets {
			propertyName := sanitizeSwiftIdentifier(colorset.Name)
			content.WriteString(fmt.Sprintf("    /// %s\n", colorset.Name))
			content.WriteString(fmt.Sprintf("    public static var %s: String {\n", propertyName))
			content.WriteString(fmt.Sprintf("        \"%s\"\n", colorset.Name))
			content.WriteString("    }\n")
		}
		content.WriteString("}\n")
	}

	// 写入文件
	if err := os.WriteFile(outputPath, []byte(content.String()), 0644); err != nil {
		return err
	}

	return nil
}

// generateImageConstants 生成图片常量文件
func generateImageConstants(imagesets []Resource, outputPath string, hasRStruct bool) error {
	var content strings.Builder

	// 写入文件头部注释
	content.WriteString("// Generated by ios-assets-coder\n")
	content.WriteString("// DO NOT EDIT THIS FILE MANUALLY\n\n")
	content.WriteString("import SwiftUI\n\n")

	// 生成R扩展（用于图片名称字符串常量）
	if hasRStruct {
		content.WriteString("// MARK: - R Extension for Image Names\n")
		content.WriteString("extension R {\n")
		content.WriteString("    // MARK: - Image Names\n")
		for _, imageset := range imagesets {
			propertyName := sanitizeSwiftIdentifier(imageset.Name)
			content.WriteString(fmt.Sprintf("    /// %s\n", imageset.Name))
			content.WriteString(fmt.Sprintf("    public static var %s: String {\n", propertyName))
			content.WriteString(fmt.Sprintf("        \"%s\"\n", imageset.Name))
			content.WriteString("    }\n")
		}
		content.WriteString("}\n\n")
	}

	// 生成Image扩展（可选，提供便捷的Image初始化方法）
	content.WriteString("// MARK: - Image Extension\n")
	content.WriteString("extension Image {\n")
	for _, imageset := range imagesets {
		propertyName := sanitizeSwiftIdentifier(imageset.Name)
		content.WriteString(fmt.Sprintf("    /// %s\n", imageset.Name))
		content.WriteString(fmt.Sprintf("    public static var %s: Image {\n", propertyName))
		content.WriteString(fmt.Sprintf("        Image(\"%s\")\n", imageset.Name))
		content.WriteString("    }\n")
	}
	content.WriteString("}\n")

	// 写入文件
	if err := os.WriteFile(outputPath, []byte(content.String()), 0644); err != nil {
		return err
	}

	return nil
}

// sanitizeSwiftIdentifier 清理字符串使其成为有效的Swift标识符
func sanitizeSwiftIdentifier(name string) string {
	// 替换特殊字符为下划线
	result := strings.ReplaceAll(name, "-", "_")
	result = strings.ReplaceAll(result, " ", "_")
	result = strings.ReplaceAll(result, "'", "")
	result = strings.ReplaceAll(result, ".", "_")
	
	// 如果第一个字符是数字，添加下划线前缀
	if len(result) > 0 && result[0] >= '0' && result[0] <= '9' {
		result = "_" + result
	}
	
	// 确保是有效的Swift标识符
	// 只保留字母、数字和下划线
	var cleaned strings.Builder
	for _, r := range result {
		if (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z') || (r >= '0' && r <= '9') || r == '_' {
			cleaned.WriteRune(r)
		} else {
			cleaned.WriteRune('_')
		}
	}
	
	return cleaned.String()
}